{"version":3,"sources":["Components/Search.js","Components/Header/Header.js","Components/EmployeeRow/EmployeeRow.js","utils/api.js","Components/TableHeader/TableHeader.js","Components/Table/Table.js","App.js","serviceWorker.js","index.js"],"names":["Search","props","className","id","type","aria-label","aria-describedby","onChange","event","updateSearchTerm","target","value","Header","EmployeeRow","src","image","alt","firstName","lastName","email","birthday","axios","get","TableHeader","onClick","sortByName","sortByAge","Table","state","employees","filterBySearch","filter","employee","name","first","toLowerCase","startsWith","searchTerm","last","sortedEmployees","sort","a","b","setState","dob","age","renderContent","map","key","login","uuid","picture","medium","API","then","res","data","results","catch","err","console","log","this","React","Component","App","string","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.98b006c5.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction Search(props) {\n  return (\n    <>\n      <div className=\"input-group input-group-lg\">\n        <div className=\"input-group-prepend\">\n          <span className=\"input-group-text\" id=\"inputGroup-sizing-lg\">\n            SEARCH\n          </span>\n        </div>\n        <input\n          type=\"text\"\n          className=\"form-control\"\n          aria-label=\"Sizing example input\"\n          aria-describedby=\"inputGroup-sizing-lg\"\n          onChange={(event) => props.updateSearchTerm(event.target.value)}\n        />\n      </div>\n    </>\n  );\n}\n\nexport default Search;\n","import React from \"react\";\nimport Search from \"../Search\";\nimport \"./style.css\";\n\n\nfunction Header(props) {\n  return (\n    <div className=\"jumbotron jumbotron-fluid\">\n    <div className=\"container\">\n      <h1 className=\"display-4\" id=\"big-title\">Employee Search</h1>\n      <p className=\"lead\" id=\"big-subtitle\"> Search Employees by entering their first or last name in the search box. \n      <br/> \n      Filter by name by clicking the arrow in \"name\" column.\n      <br/> \n      Filter by age by clicking the arrow in the \"age\" column. </p>\n      <Search updateSearchTerm={props.updateSearchTerm} />\n    </div>\n  </div>\n  );\n}\n\nexport default Header;","import React from \"react\";\nimport \"./style.css\"\n\nfunction EmployeeRow(props) {\n    return (\n      <>\n      <div className=\"row\">\n      <div className=\"col-md-2 employee-info\">\n          <img src={props.image} alt={props.firstName}/>\n      </div>\n      <div className=\"col-md-4 employee-info\">\n    <p>{props.firstName} {props.lastName}</p>\n      </div>\n      <div className=\"col-md-4 employee-info\">\n          <p>{props.email}</p>\n      </div>\n      <div className=\"col-md-2 employee-info\">\n          <p>{props.birthday}</p>\n      </div>\n      </div>\n      </>\n    );\n  }\n  \n  export default EmployeeRow;","import axios from \"axios\";\nconst BASEURL = \"https://randomuser.me/api/?results=50&nat=us\";\n\nexport default {\n  search: function() {\n    return axios.get(BASEURL);\n  }\n};","import React from \"react\";\nimport \"./style.css\"\n\nfunction TableHeader(props) {\n    return (\n      <>\n      <div id=\"header-container\" className=\"row\">\n      <div className=\"col-md-2 header-titles\">\n          <h4>PHOTO</h4>\n      </div>\n      <div id=\"name-col\" className=\"col-md-4 header-titles\">\n      <h4>NAME</h4>\n      <button type=\"button\" className=\"btn btn-outline-dark\" id=\"sort-by-name\" onClick={props.sortByName}>^</button>\n      </div>\n      <div className=\"col-md-4 header-titles\">\n      <h4>EMAIL</h4>\n      </div>\n      <div className=\"col-md-2 header-titles\">\n      <h4>AGE</h4>\n      <button type=\"button\" className=\"btn btn-outline-dark\" id=\"sort-by-age\" onClick={props.sortByAge}>^</button>\n      </div>\n      </div>\n      </>\n    );\n  }\n  \n  export default TableHeader;","import React from \"react\";\nimport EmployeeRow from \"../EmployeeRow/EmployeeRow\";\nimport API from \"../../utils/api\";\nimport TableHeader from \"../TableHeader/TableHeader\"\n\nclass Table extends React.Component {\n  state = {\n    employees: [],\n  };\n\n  componentDidMount() {\n    API.search()\n      .then((res) => {\n        this.setState({ employees: res.data.results });\n      })\n      .catch((err) => console.log(err));\n  };\n\n  filterBySearch = () => {\n    return this.state.employees.filter((employee) => {\n      return (employee.name.first.toLowerCase().startsWith(this.props.searchTerm.toLowerCase()) || \n      employee.name.last.toLowerCase().startsWith(this.props.searchTerm.toLowerCase()));\n    });\n  };\n\n  sortByName = () => {\n      let sortedEmployees = this.state.employees;\n      sortedEmployees.sort((a, b) => {\n        if (a.name.first < b.name.first) {\n          return -1;\n        }\n        if (a.name.first > b.name.first) {\n          return 1;\n        }\n        return 0;\n      });\n      this.setState({ employee: sortedEmployees })\n  };\n\n  sortByAge = () => {\n    let sortedEmployees = this.state.employees;\n    sortedEmployees.sort((a, b) => {\n      if (a.dob.age < b.dob.age) {\n        return -1;\n      }\n      if (a.dob.age > b.dob.age) {\n        return 1;\n      }\n      return 0;\n    });\n    this.setState({ employee: sortedEmployees })\n};\n\n  renderContent = () => {\n    return this.filterBySearch().map((employee) => {\n      return (\n        <EmployeeRow\n          key={employee.login.uuid}\n          firstName={employee.name.first}\n          lastName={employee.name.last}\n          email={employee.email}\n          birthday={employee.dob.age}\n          image={employee.picture.medium}\n        />\n      );\n    });\n  };\n\n  render() {\n    return (\n      <div>\n        <TableHeader \n        sortByName = {() => this.sortByName()}\n        sortByAge = {() => this.sortByAge()}\n        />\n        {this.renderContent()}\n      </div>\n    );\n  }\n}\n\nexport default Table;\n","import React from 'react';\nimport './App.css';\nimport Header from \"./Components/Header/Header\";\nimport Table from \"./Components/Table/Table\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nclass App extends React.Component {\n  state = {\n    searchTerm: \"\",\n  };\n\n  updateSearchTerm = (string) => {\n    this.setState({ searchTerm: string });\n  };\n\n  render() {\n    return (\n      <>\n        <Header updateSearchTerm={this.updateSearchTerm} />\n        <Table searchTerm={this.state.searchTerm} />\n      </>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n\nReactDOM.render(<App />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}